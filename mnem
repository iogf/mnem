#!/usr/bin/python

from os.path import join, expanduser
from datetime import datetime
from libmn import Mnem
# from daemon.pidfile import PIDLockFile
import argparse
import tempfile
import sys
import signal
import time
import os

mnem = Mnem(join(expanduser('~'), 'mnem.db'))

def handle_find(args):
    records = mnem.find(args.msg, args.find_years, 
    args.find_months, args.find_days, args.find_hours, 
    args.find_minutes, args.find_index)

    for cmd, tval, id in records:
        timestamp = datetime.fromtimestamp(tval)
        print('ID:', id, 'Cmd:', cmd, 'Date:', 
            timestamp.strftime('%Y-%m-%d %H:%M:%S'))

def handle_add(args):
    dates = mnem.expand_dates(args.years, 
    args.months, args.days, args.hours, args.minutes)
    records = mnem.add_note(' '.join(sys.argv), args.msg, dates)

    for cmd, tval in records:
        timestamp = datetime.fromtimestamp(tval)
        print('Created Note:',
            timestamp.strftime('%Y-%m-%d %H:%M:%S'))

def handle_remove(args):
    records = mnem.find(args.msg, args.find_years, 
    args.find_months, args.find_days, args.find_hours, 
    args.find_minutes, args.find_index)

    ids = (ind[2] for ind in records)    
    mnem.del_notes(set(ids))

    for cmd, tval, id in records:
        timestamp = datetime.fromtimestamp(tval)
        print('Deleted ID:', id, 'Cmd:', cmd, 'Date:', 
            timestamp.strftime('%Y-%m-%d %H:%M:%S'))

def main():
    today  = datetime.today()
        
    parser = argparse.ArgumentParser()
    parser.add_argument('msg', nargs='?', help='Messages')

    parser.add_argument('-i', '--minutes', 
    default=[today.minute],  type=int,
    nargs='*', help='List of minutes.')

    parser.add_argument('-ii', '--find-minutes', 
    default=[],  type=int,
    nargs='*', help='Find notes based on minute. ')

    parser.add_argument('-m', '--months', dest='months',    
    default=[today.month],  type=int,
    nargs='*', help='List of months.')

    parser.add_argument('-mm', '--find-months', 
    default=[],  type=int, nargs='*', help='Find notes based on month.')

    parser.add_argument('-y', '--years', 
    default=[today.year], type=int, nargs='*', 
    help='List of years.')

    parser.add_argument('-yy', '--find-years', 
    default=[], type=int, nargs='*', help='Find notes based on year.')

    parser.add_argument('-u', '--hours', default=[today.hour],  
    type=int, nargs='*', help='List of hours.')

    parser.add_argument('-uu', '--find-hours', 
    default=[],  type=int, nargs='*', help='Find notes based on hours.')

    parser.add_argument('-d', '--days', default=[today.day],  
    type=int, nargs='*', help='List of days.')

    parser.add_argument('-dd', '--find-days', default=[],  
    type=int, nargs='*', help='Find notes based on days.')

    parser.add_argument('-x', '--find-index', default=[],  
    type=int, nargs='*', help='Find notes based on index/id.')

    parser.add_argument('-a', '--add', dest='cmd', 
    action='store_const', const=handle_add, help='Add a note.')

    parser.add_argument('-f', '--find', dest='cmd', 
    action='store_const', const=handle_find,
    help="Find a note:. mnem -f 'pattern' -mm 5")

    parser.add_argument('-r', '--remove', dest='cmd', 
    action='store_const', const=handle_remove, 
    help='Remove a note: mnem -r -dd 24')
    args = parser.parse_args()

    if args.cmd: 
        args.cmd(args)
    mnem.conn.close()

if __name__ == '__main__':
    main()


